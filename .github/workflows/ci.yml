name: CI

on:
 push:
 pull_request:

jobs:
  build-ubuntu:
    name: Test on ${{ matrix.platform }} with Python ${{ matrix.python }}
    # runs-on: ${{ matrix.platform }}
    container:
      image: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, ubuntu-16.04]
        python: ['2.7', '3.6']

    steps:
    - uses: actions/checkout@v2

    - name: Setup automation
      run: |
        whoami
        mkdir -p deps
        cd deps
        git clone https://github.com/RedisLabsModules/readies.git

    - name: Setup Python 2
      if: matrix.python == '2.7'
      run: |
        sudo PIP=1 FORCE=1 ./deps/readies/bin/getpy2
        sudo python2 -m pip install virtualenv
        python2 -m virtualenv --system-site-packages venv

    - name: Setup Python 3
      if: matrix.python == '3.6'
      run: |
        sudo PIP=1 FORCE=1 ./deps/readies/bin/getpy3
        sudo python3 -m pip install virtualenv
        python3 -m virtualenv --system-site-packages venv

    - name: Install prerequisites
      run: |
        sudo -E bash -c ". venv/bin/activate; ./sbin/system-setup.py"

    - name: Cache Redis
      id: cache-redis
      uses: actions/cache@v1
      with:
        path: redis
        key: ${{ runner.os }}-redis

    - name: Install Redis Server
      if: steps.cache-redis.outputs.cache-hit != 'true'
      run: |
        . venv/bin/activate
        mkdir redis
        ./deps/readies/bin/getredis --workdir redis --no-install
        sudo cp redis/redis/src/redis-server /usr/local/bin/
        redis-server --version
        ./redis/redis/utils/gen-test-certs.sh

    - name: Unit Test with pytest
      run: |
        . venv/bin/activate
        certs=./tests/tls
        TLS_CERT=$certs/redis.crt \
        TLS_KEY=$certs/redis.key \
        TLS_CACERT=$certs/ca.crt \
        REDIS_BINARY=`command -v redis-server` \
        pytest --ignore=tests/flow --ignore=test_example.py

    - name: Install RLTest
      run: |
        . venv/bin/activate
        pip install .

    - name: Flow Test OSS TCP
      run: |
        . venv/bin/activate
        cd tests/flow
        RLTest --env oss \
            -v --clear-logs

    - name: Flow Test OSS UNIX SOCKETS
      run: |
        . venv/bin/activate
        cd tests/flow
        RLTest --env oss --unix \
            -v --clear-logs

    - name: Flow Test OSS TCP SLAVES
      run: |
        . venv/bin/activate
        cd tests/flow
        RLTest --env oss --use-slaves \
            -v --clear-logs

    - name: Flow Test OSS-CLUSTER TCP
      run: |
        . venv/bin/activate
        cd tests/flow
        RLTest --env oss-cluster --shards-count 3 \
            -v --clear-logs

    - name: Flow Test OSS TCP with TLS
      run: |
        . venv/bin/activate
        certs=$(cd tests/unit/tls; pwd)
        cd tests/flow
        RLTest --env oss \
            -v --clear-logs \
            --tls-cert-file $certs/redis.crt \
            --tls-key-file $certs/redis.key \
            --tls-ca-cert-file $certs/ca.crt \
            --tls

    - name: Flow Test OSS-CLUSTER with TLS
      run: |
        . venv/bin/activate
        certs=$(cd tests/unit/tls; pwd)
        cd tests/flow
        RLTest --env oss-cluster --shards-count 3 \
            -v --clear-logs \
            --tls-cert-file $certs/redis.crt \
            --tls-key-file $certs/redis.key \
            --tls-ca-cert-file $certs/ca.crt \
            --tls

    - name: Flow Test OSS-CLUSTER with SLAVES and TLS
      run: |
        . venv/bin/activate
        certs=$(cd tests/unit/tls; pwd)
        cd tests/flow
        RLTest --env oss-cluster --shards-count 3 --use-slaves \
            -v --clear-logs \
            --tls-cert-file $certs/redis.crt \
            --tls-key-file $certs/redis.key \
            --tls-ca-cert-file $certs/ca.crt \
            --tls

    - name: Generate coverage report
      if: matrix.platform == 'ubuntu-latest' && matrix.python == '3.6'
      run: |
        . venv/bin/activate
        certs=$(cd tests/unit/tls; pwd)
        TLS_CERT=$certs/redis.crt \
        TLS_KEY=$certs/redis.key \
        TLS_CACERT=$certs/ca.crt \
        REDIS_BINARY=`command -v redis-server` \
        pytest --ignore=tests/flow --ignore=test_example.py --cov-config=.coveragerc --cov-report=xml --cov=RLTest

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      if: matrix.platform == 'ubuntu-latest' && matrix.python == '3.6'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
