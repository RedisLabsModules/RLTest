name: CI

on:
 push:
 pull_request:
 schedule:
  - cron: "0 0 * * *"

jobs:
  build-ubuntu:
    name: Test on ${{ matrix.platform }} with Python ${{ matrix.python }}
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 10
    strategy:
      matrix:
        platform: [ubuntu-latest, ubuntu-16.04]
        python: ['2.7', '3.6', '3.8' ]

    steps:
    - uses: actions/checkout@v2
      # Number of commits to fetch. 0 indicates all history for all branches and tags.
      with:
        - fetch-depth: ''
    - name: Install OpenSSL development libraries
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y libssl-dev

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}
        architecture: x64

    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-${{ matrix.python }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python }}-pip-
          ${{ runner.os }}-${{ matrix.python }}-

    - name: Install Python dependencies
      run: |
        sudo apt-get install -y python-setuptools
        sudo apt-get install -y python3-setuptools
        pip install -r requirements.txt


    - name: Cache Redis
      id: cache-redis
      uses: actions/cache@v1
      with:
        path: redis
        key: ${{ runner.os }}-redis

    - name: Install Redis Server test dependencies
      if: steps.cache-redis.outputs.cache-hit != 'true'
      run: |
        git clone git://github.com/antirez/redis.git --branch unstable
        cd redis
        make BUILD_TLS=yes
        ./utils/gen-test-certs.sh
        ./src/redis-server --version
        cd ..

    - name: Unit Test with pytest
      timeout-minutes: 5
      run: |
        pip install pytest
        TLS_CERT=./tests/unit/tls/redis.crt \
        TLS_KEY=./tests/unit/tls/redis.key \
        TLS_CACERT=./tests/unit/tls/ca.crt \
        REDIS_BINARY=./redis/src/redis-server \
        pytest --ignore=tests/flow --ignore=test_example.py

    - name: Install RLTest
      run: |
        pip install .

    - name: Flow Test OSS TCP
      run: |
        cd tests/flow
        RLTest --env oss -v --clear-logs --oss-redis-path ../../redis/src/redis-server
        cd ..

    - name: Flow Test OSS UNIX SOCKETS
      run: |
        cd tests/flow
        RLTest --env oss -v --clear-logs --oss-redis-path ../../redis/src/redis-server
        cd ..

    - name: Flow Test OSS TCP SLAVES
      run: |
        cd tests/flow
        RLTest --env oss -v --unix --clear-logs --oss-redis-path ../../redis/src/redis-server
        cd ..

    - name: Flow Test OSS-CLUSTER TCP
      run: |
        cd tests/flow
        RLTest --env oss-cluster -v --clear-logs --shards-count 3 --oss-redis-path ../../redis/src/redis-server
        cd ..

    - name: Flow Test OSS TCP with TLS
      run: |
        cd tests/flow
        RLTest --env oss -v --clear-logs \
        --oss-redis-path ../../redis/src/redis-server \
        --tls-cert-file ../../redis/tests/tls/redis.crt \
        --tls-key-file ../../redis/tests/tls/redis.key \
        --tls-ca-cert-file ../../redis/tests/tls/ca.crt \
        --tls
        cd ..

    - name: Flow Test OSS-CLUSTER with TLS
      run: |
        cd tests/flow
        RLTest --env oss-cluster --shards-count 3 -v --clear-logs \
        --oss-redis-path ../../redis/src/redis-server \
        --tls-cert-file ../../redis/tests/tls/redis.crt \
        --tls-key-file ../../redis/tests/tls/redis.key \
        --tls-ca-cert-file ../../redis/tests/tls/ca.crt \
        --tls
        cd ..

    - name: Flow Test OSS-CLUSTER with SLAVES and TLS
      run: |
        cd tests/flow
        RLTest --env oss-cluster --shards-count 3 --use-slaves -v --clear-logs \
        --oss-redis-path ../../redis/src/redis-server \
        --tls-cert-file ../../redis/tests/tls/redis.crt \
        --tls-key-file ../../redis/tests/tls/redis.key \
        --tls-ca-cert-file ../../redis/tests/tls/ca.crt \
        --tls
        cd ../..

    - name: Generate coverage report
      if: matrix.platform == 'ubuntu-latest' && matrix.python == '3.6'
      run: |
        pip install pytest
        pip install pytest-cov
        TLS_CERT=./tests/unit/tls/redis.crt \
        TLS_KEY=./tests/unit/tls/redis.key \
        TLS_CACERT=./tests/unit/tls/ca.crt \
        REDIS_BINARY=./redis/src/redis-server \
        pytest --ignore=tests/flow --ignore=test_example.py --cov-config=.coveragerc --cov-report=xml --cov=RLTest

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      if: matrix.platform == 'ubuntu-latest' && matrix.python == '3.6'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true